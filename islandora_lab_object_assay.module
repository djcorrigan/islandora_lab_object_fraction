<?php
/**
 * @file
 * Islandora Bioinformatics Fraction Module
 * 
 * @author Nolan Phillips ncphillips@upei.ca
 * @author Brent Mitton bmitton@upei.ca
 * @author Natasha Squires nbsquires@upei.ca
 * @author Quintin Dawson qdawson@upei.ca
 */

/**
 * Menu items for the assay solpack.
 * @todo
 *  refactor
 * @return array
 */
function islandora_lab_object_assay_menu(){
  return array(
    'assay/assays' => array(
      'title' => "Autocomplete Assays",
      'page callback' => "_assay_autocomplete",
      'access arguments' => TRUE,
      'type' => MENU_CALLBACK,
    ),
    'islandora/object/%islandora_object/fractions' => array(
      'title' => 'Fractions',
      'type' => MENU_LOCAL_TASK,
      'description' => "Fractions associated with this object",
      'page arguments' => array('related_assay_form', 2),
      'access callback' => 'islandora_object_has_fraction',
      'access arguments' => array(2),
    )
  );
}


/**
 * @param $object
 * @return bool
 * @todo assay_cmodel to fraction_cmodel on refactor
 */
function islandora_object_has_fraction($object){
  $cmodel_id = $object->models[0];
  $query = "
    PREFIX fedora-model: <info:fedora/fedora-system:def/model#>
    SELECT ?datarel
    FROM <#ri>
    WHERE
    {
      {<info:fedora/islandora:assay_cmodel> ?datarel <info:fedora/$cmodel_id>} .
    }
  ";

  $tuque = new IslandoraTuque();
  $result = $tuque->repository->ri->sparqlQuery($query, 'unlimited');

  if (sizeof($result) > 0)
    return TRUE;
  else
    return FALSE;
}

function islandora_lab_object_assay_forms($form_id, $args){
  echo "HERE?"; die;
  /**
   * @author Nolan Phillips ncphillips@upei.ca
   *
   * @param $form_id
   * @param $args
   * @return $forms
   *
   * Implements hook_forms($form_id, $args)
   *
   * This function is used to associate a new Form ID with an existing form constructor.
   */
  $forms = array();
  switch($form_id){
    /**
     * ## Related Assays Form
     * __Form ID:__ `related_assay_form`
     *
     * __Form Base ID:__ `related_islandora_objects_form`
     *
     * Creates a `related_islandora_objects_form` with the `$cmodel` and `$relationships`
     * arguments set as:
     *
     *      $cmodels = array('islandora:assay_cmodel');
     *      $relationships = array(FEDORA_RELS_EXT_URI => array('isPartOf'),);
     */
    case 'related_assay_form':
      echo "HERE?"; die;
      $cmodels = array('islandora:assay_cmodel');
      $relationships = array(FEDORA_RELS_EXT_URI => array('isPartOf', 'isMemberOf',),);

      $args[] = $cmodels;
      $args[] = $relationships;

      $forms['related_assay_form'] = array(
        'callback' => 'related_islandora_objects_form',
        'callback arguments' => $args,
      );
      break;
  }
  return $forms;
}

function assay_form(array $form, array &$form_state, AbstractObject $object){



  //exit();
  //$thing = "HEY";
}


/**
 * Implements hook_islandora_required_objects()
 * 
 * @param $connection
 * An IslandoraTuque object which connects to the Fedora Repository to be altered.
 * 
 * @return array
 * An array containing the Fedora Objects created in this hook. 
 */
function islandora_lab_object_assay_islandora_required_objects(IslandoraTuque $connection) {
  module_load_include('inc', 'islandora_bioinformatics_base', 'base_functions');


  $module_path = drupal_get_path('module', 'islandora_lab_object_assay');
  $assay_cm = $connection->repository->constructObject('islandora:assay_cmodel');
  $assay_cm->owner = 'fedoraAdmin';
  $assay_cm->label = 'Assay Content Model';
  $assay_cm->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $assay_cm->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/content_models/islandora_lab_object_assay_ds_composite_model.xml", FALSE);
  $assay_cm->ingestDatastream($datastream);
  // Create relationship with LabObject
  $assay_cm->relationships->add(FEDORA_MODEL_URI, 'hasModel', 'islandora:lab_object_cmodel');
  // Remove word _specimen and just have datarel
  $assay_cm->relationships->add("", 'datarel_specimen', 'islandora:specimen_cmodel');

  // Fraction collection
  $assay_collection = $connection->repository->constructObject('islandora:assay_collection');
  $assay_collection->owner = 'fedoraAdmin';
  $assay_collection->label = 'Assay Collection';
  $assay_collection->models = 'islandora:collectionCModel';
  $assay_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  $datastream = $assay_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/collection_policies/islandora_lab_object_assay_collection_policy.xml", FALSE);
  $assay_collection->ingestDatastream($datastream);


  $specimen_cm = islandora_object_load("islandora:specimen_cmodel");
  add_hasPart($specimen_cm, "islandora:assay_cmodel");
  add_isPartOf($assay_cm, "islandora:specimen_cmodel");
    
  return array(
    'islandora_lab_object_assay' => array(
      'title' => 'Assay',
      'objects' => array(
          $assay_cm,
          $assay_collection,
      ),
    ),
  );
}

/**
 * @return array
 * An array with a form name as a key, and a path to the form as a value.
 */
function islandora_lab_object_assay_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'islandora_lab_object_assay');
  $forms = array(
    'Assay Form' => array(
      'form_file' => "$module_path/xml/forms/islandora_lab_object_assay_form.xml",
    ),
    'Compound Form' => array(
      'form_file' => "$module_path/xml/forms/islandora_lab_object_assay_compound_form.xml",
    ),
  );
  return $forms;
}

/**
 * @return array
 * returns default form associations
 */
function islandora_lab_object_assay_islandora_xml_form_builder_form_associations() {
  $module_path = drupal_get_path('module', 'islandora_lab_object_assay');
  $form_assoc = array(
    'islandora_lab_object_assay_form' => array(
      'content_model' => "islandora:assay_cmodel",
      'form_name' => 'Assay Form',
      'dsid' => 'fraction',
      'transform' => '',
      'template' => FALSE,
      'title_field' => array('id'),
    ),
    'islandora_lab_object_assay_compound_form' => array(
      'content_model' => "islandora:assay_cmodel",
      'form_name' => 'Compound Form',
      'dsid' => 'fraction',
      'transform' => '',
      'template' => FALSE,
      'title_field' => array('id'),
    ),
  );
  return $form_assoc;
}


/**
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function islandora_lab_object_assay_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_lab_object_assay' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/assay-theme',
      'pattern' => 'islandora_lab_object_assay__',
      'variables' => array('islandora_object' => NULL),
    ),
    'islandora_lab_object_assay_table' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/assay-table-theme',
      'pattern' => 'islandora_lab_object_assay_table__',
      'variables' => array(
          'islandora_object' => NULL
      ),
    ),
  );
}

/**
 * @param $object
 * @param $page_number
 * @param $page_size
 * @return array
 */
function islandora_lab_object_assay_islandora_assay_cmodel_islandora_view_object($object, $page_number, $page_size) {
  $output = theme('islandora_lab_object_assay_table', array('islandora_object' => $object));

  return array('islandora_lab_object_assay_table' => $output);
}

/**
 * @param array $configuration
 * @return array
 */
function islandora_lab_object_assay_islandora_assay_cmodel_islandora_ingest_steps(array $configuration) {

  return array(
    'islandora_lab_object_assay_specimen_form' => array(
      'weight' => 10,
      'type' => 'form',
      'form_id' => 'islandora_lab_object_assay_specimen_form',
      'module' => 'islandora_lab_object_assay',
      'file' => 'includes/assay_relate.form.inc'
    )
  );
}


/**
 * @author Brent Mitton
 * @param $string
 * Takes in part of a string that is currently being typed into a textbox
 * and then does a mysql LIKE query. For autocompletion on assay forms
 */
function _assay_autocomplete($string){
  $matches = array();

   $or = db_or()
       ->condition('abbreviation', '%' . db_like($string) . '%', 'LIKE')
       ->condition('name', '%' . db_like($string) . '%', 'LIKE');

  $result = db_select('labobject_assay_assay', 'a')
      ->fields('a', array('abbreviation', 'name'))
      ->condition($or)
      ->execute();
  // save the query to matches
  foreach ($result as $row) {
    $matches[$row->name] = check_plain($row->abbreviation) . " - " . check_plain($row->name) ;
  }

  drupal_json_output($matches);
}

/**
 * Takes in an assay object and returns an array.
 * @param $assay_object
 *  An islandora assay object
 * @return array
 *  A simple array containing the assay information
 */
function assay_object_to_array($assay_object){


  // query the assays and store them
  $result = db_select('labobject_assay_assay', 'a')
      ->fields('a', array('abbreviation', 'name'))
      ->execute();

  foreach($result as $row){
    $assays[$row->abbreviation] = $row->name;
  }


  $ns = "http://www.upeikerrlab.ca";
  $assay_array = array();

  $assay_xml = new SimpleXMLElement($assay_object["fraction"]->content);

  $i = 0;
  foreach($assay_xml->children($ns) as $part){

    switch ((string) $part->getName()){
      case "type":
        $assay_array["type"] = ((string)$part) ? (string)$part:"";
        break;
      case "labid":
        $assay_array["labid"] = ((string)$part) ? (string)$part:"";
        break;
      case "weight":
        $assay_array["weight"] = ((string)$part) ? (string)$part:"";
        break;
      case "plate":
        $assay_array["plate"] = ((string)$part) ? (string)$part:"";
        break;
      case "location":
        $assay_array["location"] = ((string)$part) ? (string)$part:"";
        break;
      case "notes":
        $assay_array["notes"] = ((string)$part) ? (string)$part:"";
        break;
      case "inhibitor":

        foreach ($assays as $key => $value) {
          if ((string) $part->name == $value){
            $assay_array["fraction"][$key]["name"] = $value;
            $assay_array["fraction"][$key]["result"] = ((string)$part->result) ? (string)$part->result:"";
            $assay_array["fraction"][$key]["comment"] = ((string)$part->comment) ? (string)$part->comment:"";

          }
        }
        break;
    }
  }

  return $assay_array;
}


/**
 * @author Quintin Dawson qdawson@upei.ca
 * This function should create a new assay object and create a relationship between it and the $parent object
 */

function islandora_lab_object_assay_ingest(AbstractObject $parent) {
  $collection = islandora_object_load('islandora:assay_collection');
  if($collection !== FALSE) {
    if (($configuration = islandora_lab_object_assay_load_ingest_configuration($collection, $parent)) !== FALSE) {
      module_load_include('inc', 'islandora', 'includes/ingest.form');
      return drupal_get_form('islandora_ingest_form', $configuration);
    }
  }
  drupal_not_found();
}


function islandora_lab_object_assay_load_ingest_configuration(AbstractObject $collection, AbstractObject $parent) {
  $is_collection_object = in_array('islandora:collectionCModel', $collection->models);
  $has_policy = isset($collection['COLLECTION_POLICY']);
  if (!$is_collection_object || !$has_policy) {
    return array();
  }

  $object = $collection->repository->constructObject('islandora');
  $object->label = 'New Object';

  $results = $object->relationships->get(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', $collection->id);
  if (empty($results)) {
    $object->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', $collection->id);
  }

  $results = $object->relationships->get(FEDORA_RELS_EXT_URI, 'isPartOf', $parent->id);
  if (empty($results)) {
    $object->relationships->add(FEDORA_RELS_EXT_URI, 'isPartOf', $parent->id);
  }

  $policy = new CollectionPolicy($collection['COLLECTION_POLICY']->content);

  return array(
    'collection' => $collection,
    'models' => array('islandora:assay_cmodel'), //array_keys($policy->getContentModels()),
    'objects' => array($object),
    'parent' => $collection->id,
  );
}
